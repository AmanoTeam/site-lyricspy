---
import "@fontsource-variable/inter";
---

<script>
  import { extractColors } from "extract-colors";

  function secondsToPrettyTime(seconds: number) {
    return new Date(seconds * 1000)
      .toISOString()
      .substring(11, 19)
      .replace(/^00:/, "");
  }

  const loc = window.location.href;
  const params = new URL(loc).searchParams;

  const spotifyLogo =
    '<svg role="img" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><title>Spotify</title><path d="M12 0C5.4 0 0 5.4 0 12s5.4 12 12 12 12-5.4 12-12S18.66 0 12 0zm5.521 17.34c-.24.359-.66.48-1.021.24-2.82-1.74-6.36-2.101-10.561-1.141-.418.122-.779-.179-.899-.539-.12-.421.18-.78.54-.9 4.56-1.021 8.52-.6 11.64 1.32.42.18.479.659.301 1.02zm1.44-3.3c-.301.42-.841.6-1.262.3-3.239-1.98-8.159-2.58-11.939-1.38-.479.12-1.02-.12-1.14-.6-.12-.48.12-1.021.6-1.141C9.6 9.9 15 10.561 18.72 12.84c.361.181.54.78.241 1.2zm.12-3.36C15.24 8.4 8.82 8.16 5.16 9.301c-.6.179-1.2-.181-1.38-.721-.18-.601.18-1.2.72-1.381 4.26-1.26 11.28-1.02 15.721 1.621.539.3.719 1.02.419 1.56-.299.421-1.02.599-1.559.3z"/></svg>';
  const lastFMLogo =
    '<svg role="img" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><title>Last.fm</title><path d="M10.584 17.21l-.88-2.392s-1.43 1.594-3.573 1.594c-1.897 0-3.244-1.649-3.244-4.288 0-3.382 1.704-4.591 3.381-4.591 2.42 0 3.189 1.567 3.849 3.574l.88 2.749c.88 2.666 2.529 4.81 7.285 4.81 3.409 0 5.718-1.044 5.718-3.793 0-2.227-1.265-3.381-3.63-3.931l-1.758-.385c-1.21-.275-1.567-.77-1.567-1.595 0-.934.742-1.484 1.952-1.484 1.32 0 2.034.495 2.144 1.677l2.749-.33c-.22-2.474-1.924-3.492-4.729-3.492-2.474 0-4.893.935-4.893 3.932 0 1.87.907 3.051 3.189 3.601l1.87.44c1.402.33 1.869.907 1.869 1.704 0 1.017-.99 1.43-2.86 1.43-2.776 0-3.93-1.457-4.59-3.464l-.907-2.75c-1.155-3.573-2.997-4.893-6.653-4.893C2.144 5.333 0 7.89 0 12.233c0 4.18 2.144 6.434 5.993 6.434 3.106 0 4.591-1.457 4.591-1.457z"/></svg>';


  const cover = params.get("cover");
  const track = params.get("track");
  const artist = params.get("artist");
  const currentTheme = params.get("theme");
  const source = params.get("source");
  const blurredBg = parseInt(params.get("blurbg") || "", 10);
  const timeCurrent = parseInt(params.get("timenow") || "", 10);
  const timeTotal = parseInt(params.get("timetotal") || "", 10);
  const scrobbles = parseInt(params.get("scrobbles") || "", 10);

  const coverDiv = document.querySelector("img#coverart") as HTMLImageElement;
  if (cover) {
    coverDiv.src = cover;
  }

  const sourceLogo = document.querySelector("div#source-logo") as HTMLDivElement;

  const bgImage = document.querySelector("div#bg-image") as HTMLDivElement;

  if (blurredBg) {
    bgImage.style.backgroundImage = `url('${cover}')`;
  } else {
    bgImage.style.filter = "initial";
    bgImage.style.backgroundColor = "var(--color-secondary)";
  }

  const sideDetails = document.querySelector(
    "div#side-details",
  ) as HTMLDivElement;

  const trackSpan = document.querySelector("span#trackname") as HTMLSpanElement;
  if (track) {
    trackSpan.innerText = track;
  }

  const artistSpan = document.querySelector(
    "span#artistname",
  ) as HTMLSpanElement;
  if (artist) {
    artistSpan.innerText = artist;
  }

  if (!scrobbles) {
    const timeCurrentSpan = document.querySelector(
      "span#time-current",
    ) as HTMLSpanElement;
    timeCurrentSpan.innerText = secondsToPrettyTime(timeCurrent);

    const timeTotalSpan = document.querySelector(
      "span#time-total",
    ) as HTMLSpanElement;
    timeTotalSpan.innerText = secondsToPrettyTime(timeTotal);
  }

  const progressDiv = document.querySelector("div#progress") as HTMLDivElement;

  const lastFMDiv = document.querySelector("div#lastfm") as HTMLDivElement;

  if (timeTotal) {
    lastFMDiv.style.display = "none";

    const currentProgress = document.querySelector(
      "div#progress-current",
    ) as HTMLDivElement;

    const percent = Math.min((timeCurrent * 100) / timeTotal, 100);

    currentProgress.style.width = `${percent + 10}%`;
  } else if (scrobbles) {
    progressDiv.style.display = "none";

    const scrobblesCountSpan = document.querySelector(
      "span#scrobbles-count",
    ) as HTMLSpanElement;
    if (scrobbles) {
      scrobblesCountSpan.innerText = scrobbles.toString();
    }

    const scrobblesTextSpan = document.querySelector(
      "span#scrobbles-text",
    ) as HTMLSpanElement;
    if (scrobbles === 1) {
      scrobblesTextSpan.innerText = "scrobble";
    }
  } else {
    progressDiv.style.display = "none";
    lastFMDiv.style.display = "none";
  }

  if (currentTheme === "light") {
    document.body.classList.add("light-mode");
  } else {
    document.body.classList.add("dark-mode");
  }

  switch (source) {
    case "spotify":
      sourceLogo.insertAdjacentHTML("beforeend", spotifyLogo);
      break;
    case "lastfm":
      sourceLogo.insertAdjacentHTML("beforeend", lastFMLogo);
      break;
  }

  const sideDetailsStyle = document.defaultView!.getComputedStyle(sideDetails);
  const coverArtStyle = document.defaultView!.getComputedStyle(coverDiv);

  let trackNameFont = 15; // 15vw
  let artistNameFont = 6; // 6vw

  coverDiv.addEventListener("load", async () => {
    while (
      parseFloat(sideDetailsStyle.height) > parseFloat(coverArtStyle.height)
    ) {
      trackNameFont *= 0.995;
      artistNameFont *= 0.9985;

      trackSpan.style.fontSize = `${trackNameFont}vw`;
      artistSpan.style.fontSize = `${artistNameFont}vw`;
    }

    const palette = await extractColors(coverDiv, { crossOrigin: "anonymous" });

    const color = `rgb(${palette[0].red} ${palette[0].green} ${palette[0].blue})`;

    document.documentElement.style.setProperty("--base-color", color);
  });
</script>

<html lang="en">
  <head>
    <title>DOM Image</title>
  </head>

  <body
    class="overflow-clip bg-[var(--base-color)] font-bold text-[var(--color-primary)]"
  >
    <div
      id="bg-image"
      class="-z-10 absolute h-screen w-screen scale-[1.28] bg-center bg-cover blur-[4vw] brightness-[var(--filter-brightness)]"
    >
    </div>
    <div class="flex h-screen w-screen bg-[var(--bg-filter)]">
      <div class="mx-[4vw] my-auto flex w-full flex-row gap-[5vw]">
        <img
          id="coverart"
          class="h-[33vw] rounded-[5%] shadow-2xl shadow-black/20"
        />
        <div id="side-details" class="flex w-full flex-col py-[1vw]">
          <span id="trackname" class="mb-[1vw] break-words text-[15vw]" />
          <span id="artistname" class="text-[6vw]" />
          <div class="mt-auto">
            <div id="progress" class="mt-[2vw]">
              <div
                class="my-[1vw] mt-auto h-[3.5vw] w-full overflow-clip rounded-full bg-[var(--bg-progress)]"
              >
                <div
                  id="progress-current"
                  class="relative left-[-10%] h-full rounded-full bg-[var(--color-primary)]"
                >
                </div>
              </div>
              <div class="flex justify-between px-1.5 text-[3vw]">
                <span id="time-current" />
                <span id="time-total" />
              </div>
            </div>
            <div id="lastfm" class="mt-[2vw] flex flex-row items-center">
              <span
                id="scrobbles-count"
                class="auto-mix-blend mr-[2vw] rounded-[6vw] bg-[var(--color-primary)] px-[2.5vw] text-[5.5vw] text-[var(--base-color-secondary)]"
              />
              <span id="scrobbles-text" class="text-[5vw]">scrobbles</span>
            </div>
          </div>
        </div>
        <div id="source-logo" class="absolute fill-[var(--color-primary)] w-[5vw] top-[4vw] right-[4vw]"></div>
      </div>
    </div>
  </body>
</html>

<style>
  :root {
    --base-color: rgb(
      128 128 128
    ); /* fallback color for when js is unable to fetch a color */
    --color-transparent: rgb(0 0 0 / 0);
  }

  .light-mode {
    --filter-brightness: 1.5;
    --base-color-primary: rgb(0 0 0);
    --base-color-secondary: rgb(255 255 255);
    --mix-blend-mode: multiply;
  }

  .dark-mode {
    --filter-brightness: 0.5;
    --base-color-primary: rgb(255 255 255);
    --base-color-secondary: rgb(0 0 0);
    --mix-blend-mode: screen;
  }

  body {
    --color-primary: color-mix(
      in srgb,
      var(--base-color) 20%,
      var(--base-color-primary)
    );
    --color-secondary: color-mix(
      in srgb,
      var(--base-color) 15%,
      var(--base-color-secondary)
    );

    --bg-filter: color-mix(
      in srgb,
      var(--color-secondary) 40%,
      var(--color-transparent)
    );
    --bg-progress: color-mix(
      in srgb,
      var(--color-primary) 30%,
      var(--color-transparent)
    );
  }

  .auto-mix-blend {
    mix-blend-mode: var(--mix-blend-mode);
  }
</style>
