---
import "@fontsource-variable/inter";
---

<script>
  import { extractColors } from "extract-colors";

  function secondsToPrettyTime(seconds: number) {
    return new Date(seconds * 1000)
      .toISOString()
      .substring(11, 19)
      .replace(/^00:/, "");
  }

  const loc = window.location.href;
  const params = new URL(loc).searchParams;

  const cover = params.get("cover");
  const track = params.get("track");
  const artist = params.get("artist");
  const currentTheme = params.get("theme");
  const blurredBg = parseInt(params.get("blurbg") || "", 10);
  const timeCurrent = parseInt(params.get("timenow") || "", 10);
  const timeTotal = parseInt(params.get("timetotal") || "", 10);
  const scrobbles = parseInt(params.get("scrobbles") || "", 10);

  const coverDiv = document.querySelector("img#coverart") as HTMLImageElement;
  if (cover) {
    coverDiv.src = cover;
  }

  if (blurredBg) {
    document.body.style.backgroundImage = `url('${cover}')`;
  } else {
    document.body.style.backdropFilter = "initial";
    document.body.style.backgroundColor = "var(--color-secondary)";
  }

  const trackSpan = document.querySelector("span#trackname") as HTMLSpanElement;
  if (track) {
    trackSpan.innerText = track;
  }

  const artistSpan = document.querySelector(
    "span#artistname",
  ) as HTMLSpanElement;
  if (artist) {
    artistSpan.innerText = artist;
  }

  if (!scrobbles) {
    const timeCurrentSpan = document.querySelector(
      "span#time-current",
    ) as HTMLSpanElement;
    timeCurrentSpan.innerText = secondsToPrettyTime(timeCurrent);

    const timeTotalSpan = document.querySelector(
      "span#time-total",
    ) as HTMLSpanElement;
    timeTotalSpan.innerText = secondsToPrettyTime(timeTotal);
  }

  const detailsTop = document.querySelector(
    "div#details-top",
  ) as HTMLDivElement;

  let maxPercent;

  const progressDiv = document.querySelector("div#progress") as HTMLDivElement;

  const lastFMDiv = document.querySelector("div#lastfm") as HTMLDivElement;

  if (timeTotal) {
    maxPercent = 0.6;

    lastFMDiv.style.display = "none";

    const currentProgress = document.querySelector(
      "div#progress-current",
    ) as HTMLDivElement;

    const percent = Math.min((timeCurrent * 100) / timeTotal, 100);

    currentProgress.style.width = `${percent + 10}%`;
  } else if (scrobbles) {
    maxPercent = 0.6;

    progressDiv.style.display = "none";

    const scrobblesCountSpan = document.querySelector(
      "span#scrobbles-count",
    ) as HTMLSpanElement;
    if (scrobbles) {
      scrobblesCountSpan.innerText = scrobbles.toString();
    }

    const scrobblesTextSpan = document.querySelector(
      "span#scrobbles-text",
    ) as HTMLSpanElement;
    if (scrobbles === 1) {
      scrobblesTextSpan.innerText = "scrobble";
    }
  } else {
    maxPercent = 0.8;

    progressDiv.style.display = "none";
    lastFMDiv.style.display = "none";
  }

  if (currentTheme === "light") {
    document.body.classList.add("light-mode");
  } else {
    document.body.classList.add("dark-mode");
  }

  const topStyle = document.defaultView!.getComputedStyle(detailsTop);
  const artistStyle = document.defaultView!.getComputedStyle(artistSpan);

  let trackNameFont = 15; // 15vw
  let artistNameFont = 6; // 6vw

  // wait for fonts to load
  document.fonts.ready.then(function () {
    while (
      parseInt(topStyle.height, 10) + parseInt(artistStyle.height, 10) >
      window.outerWidth * 0.33 * maxPercent
    ) {
      // 60% or 80% of cover art size (33% of screen width)
      trackNameFont *= 0.995;
      artistNameFont *= 0.9985;

      trackSpan.style.fontSize = `${trackNameFont}vw`;
      artistSpan.style.fontSize = `${artistNameFont}vw`;
    }
  });

  coverDiv.addEventListener("load", async () => {
    const palette = await extractColors(coverDiv, { crossOrigin: "anonymous" });

    const color = `rgb(${palette[0].red} ${palette[0].green} ${palette[0].blue})`;

    document.documentElement.style.setProperty("--base-color", color);
  });
</script>

<html lang="en">
  <head>
    <title>DOM Image</title>
  </head>

  <body
    class="font-bold text-[var(--color-primary)] bg-cover bg-center bg-no-repeat backdrop-blur-[7vw] backdrop-brightness-[var(--filter-brightness)]"
  >
    <div class="flex h-screen w-screen bg-[var(--bg-filter)]">
      <div class="m-auto flex flex-row gap-[5vw]">
        <img
          id="coverart"
          class="w-[33vw] rounded-[5%] shadow-2xl shadow-black/20"
        />
        <div class="w-[54vw] my-auto">
          <div id="details-top">
            <span id="trackname" class="block mb-[1vw] break-words text-[15vw]"
            ></span>
          </div>
          <span id="artistname" class="block text-[6vw]"></span>
          <div id="progress">
            <div
              class="bg-[var(--bg-progress)] w-full h-[3.5vw] rounded-full my-[1vw] overflow-clip"
            >
              <div
                id="progress-current"
                class="relative bg-[var(--color-primary)] h-full left-[-10%] rounded-full"
              >
              </div>
            </div>
            <div class="flex text-[3vw]">
              <span id="time-current" class="mr-auto pl-1.5"></span>
              <span id="time-total" class="pr-1.5"></span>
            </div>
          </div>
          <div id="lastfm" class="flex flex-row items-center mt-2vw">
            <span
              id="scrobbles-count"
              class="text-[5.5vw] mr-[2vw] bg-[var(--color-primary)] text-[var(--base-color-secondary)] auto-mix-blend px-[2.5vw] rounded-[6vw]"
            ></span>
            <span id="scrobbles-text" class="text-[5vw]">scrobbles</span>
          </div>
        </div>
      </div>
    </div>
  </body>
</html>

<style>
  :root {
    --base-color: rgb(
      128 128 128
    ); /* fallback color for when js is unable to fetch a color */
    --color-transparent: rgb(0 0 0 / 0);
  }

  .light-mode {
    --filter-brightness: 1.5;
    --base-color-primary: rgb(0 0 0);
    --base-color-secondary: rgb(255 255 255);
    --mix-blend-mode: multiply;
  }

  .dark-mode {
    --filter-brightness: 0.5;
    --base-color-primary: rgb(255 255 255);
    --base-color-secondary: rgb(0 0 0);
    --mix-blend-mode: screen;
  }

  body {
    --color-primary: color-mix(
      in srgb,
      var(--base-color) 20%,
      var(--base-color-primary)
    );
    --color-secondary: color-mix(
      in srgb,
      var(--base-color) 15%,
      var(--base-color-secondary)
    );

    --bg-filter: color-mix(
      in srgb,
      var(--color-secondary) 40%,
      var(--color-transparent)
    );
    --bg-progress: color-mix(
      in srgb,
      var(--color-primary) 30%,
      var(--color-transparent)
    );
  }

  .auto-mix-blend {
    mix-blend-mode: var(--mix-blend-mode);
  }
</style>
