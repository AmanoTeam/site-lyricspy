---
import "@fontsource-variable/inter";
---

<script>
  import { extractColors } from "extract-colors";

  function secondsToPrettyTime(seconds: number) {
    return new Date(seconds * 1000)
      .toISOString()
      .substring(11, 19)
      .replace(/^00:/, "");
  }

  function mixColors(color1: string, color2: string, ratio: number) {
    const r1 = parseInt(color1.substring(1, 3), 16);
    const g1 = parseInt(color1.substring(3, 5), 16);
    const b1 = parseInt(color1.substring(5, 7), 16);
    const r2 = parseInt(color2.substring(1, 3), 16);
    const g2 = parseInt(color2.substring(3, 5), 16);
    const b2 = parseInt(color2.substring(5, 7), 16);
    const r = Math.round((r2 - r1) * ratio + r1);
    const g = Math.round((g2 - g1) * ratio + g1);
    const b = Math.round((b2 - b1) * ratio + b1);
    return "#" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
  }

  const loc = window.location.href;
  const params = new URL(loc).searchParams;

  const cover = params.get("cover");
  const track = params.get("track");
  const artist = params.get("artist");
  const currentTheme = params.get("theme");
  const blurredBg = parseInt(params.get("blurbg") || "", 10);
  const timeCurrent = parseInt(params.get("timenow") || "", 10);
  const timeTotal = parseInt(params.get("timetotal") || "", 10);
  const scrobbles = parseInt(params.get("scrobbles") || "", 10);

  const coverDiv = document.querySelector("img#coverart") as HTMLImageElement;
  if (cover) {
    coverDiv.src = cover;
  }

  const coverDivBg = document.querySelector("div#bg-image") as HTMLDivElement;

  if (blurredBg) {
    coverDivBg.style.backgroundImage = `url('${cover}')`;
  } else {
    coverDivBg.style.filter = "initial";
  }

  const trackSpan = document.querySelector("span#trackname") as HTMLSpanElement;
  if (track) {
    trackSpan.innerText = track;
  }

  const artistSpan = document.querySelector(
    "span#artistname",
  ) as HTMLSpanElement;
  if (artist) {
    artistSpan.innerText = artist;
  }

  if (!scrobbles) {
    const timeCurrentSpan = document.querySelector(
      "span#time-current",
    ) as HTMLSpanElement;
    timeCurrentSpan.innerText = secondsToPrettyTime(timeCurrent);

    const timeTotalSpan = document.querySelector(
      "span#time-total",
    ) as HTMLSpanElement;
    timeTotalSpan.innerText = secondsToPrettyTime(timeTotal);
  }

  const detailsTop = document.querySelector(
    "div#details-top",
  ) as HTMLDivElement;

  let maxPercent;

  const progressDiv = document.querySelector("div#progress") as HTMLDivElement;

  const lastFMDiv = document.querySelector("div#lastfm") as HTMLDivElement;

  if (timeTotal) {
    maxPercent = 0.6;

    lastFMDiv.style.display = "none";

    const currentProgress = document.querySelector(
      "div#progress-current",
    ) as HTMLDivElement;

    const percent = (timeCurrent * 100) / timeTotal;

    currentProgress.style.width = `${percent * 0.54}vw`;
  } else if (scrobbles) {
    maxPercent = 0.6;

    progressDiv.style.display = "none";

    const scrobblesCountSpan = document.querySelector(
      "span#scrobbles-count",
    ) as HTMLSpanElement;
    if (scrobbles) {
      scrobblesCountSpan.innerText = scrobbles.toString();
    }

    const scrobblesTextSpan = document.querySelector(
      "span#scrobbles-text",
    ) as HTMLSpanElement;
    if (scrobbles === 1) {
      scrobblesTextSpan.innerText = "scrobble";
    }
  } else {
    maxPercent = 0.8;

    progressDiv.style.display = "none";
    lastFMDiv.style.display = "none";
  }

  if (currentTheme === "light") {
    document.body.classList.add("light-mode");
  } else {
    document.body.classList.add("dark-mode");
  }

  const topStyle = document.defaultView!.getComputedStyle(detailsTop);
  const artistStyle = document.defaultView!.getComputedStyle(artistSpan);

  let trackNameFont = 15; // 15vw
  let artistNameFont = 6; // 6vw

  // wait for fonts to load
  document.fonts.ready.then(function () {
    while (
      parseInt(topStyle.height, 10) + parseInt(artistStyle.height, 10) >
      window.outerWidth * 0.33 * maxPercent
    ) {
      // 60% or 80% of cover art size (33% of screen width)
      trackNameFont *= 0.995;
      artistNameFont *= 0.9985;

      trackSpan.style.fontSize = `${trackNameFont}vw`;
      artistSpan.style.fontSize = `${artistNameFont}vw`;
    }
  });

  coverDiv.addEventListener("load", async () => {
    const palette = await extractColors(coverDiv, { crossOrigin: "anonymous" });

    let baseColorPrimary;
    let baseColorSecondary;

    const color = palette[0].hex;

    if (currentTheme === "light") {
      baseColorPrimary = "#000000";
      baseColorSecondary = "#ffffff";
    } else {
      baseColorPrimary = "#ffffff";
      baseColorSecondary = "#000000";
    }

    document.documentElement.style.setProperty("--bg-filter", `${color}60`);
    document.documentElement.style.setProperty(
      "--color-primary",
      mixColors(baseColorPrimary, color, 0.2),
    );
    document.documentElement.style.setProperty(
      "--color-secondary",
      mixColors(baseColorSecondary, color, 0.2),
    );
    document.documentElement.style.setProperty(
      "--color-progress",
      mixColors(baseColorPrimary, color, 0.2) + "4d",
    );
  });
</script>

<html lang="en">
  <head>
    <title>DOM Image</title>
  </head>

  <body
    class="flex font-inter font-bold text-[var(--color-primary)] h-screen w-screen m-0"
  >
    <div id="main" class="m-auto flex flex-row gap-[5vw]">
      <div id="cover-div">
        <img
          id="coverart"
          class="w-[33vw] rounded-[5%] shadow-2xl shadow-black/20"
        />
      </div>
      <div id="details-div" class="w-[54vw] my-auto">
        <div id="details-top">
          <span id="trackname" class="block mb-[1vw] break-words text-[15vw]"
          ></span>
        </div>
        <div id="details-middle">
          <span id="artistname" class="block text-[6vw]"></span>
        </div>
        <div id="details-bottom">
          <div id="progress">
            <div
              id="progress-total"
              class="bg-[var(--color-progress)] w-full h-[3.5vw] rounded-[3.5vw] my-[1vw] overflow-hidden"
            >
              <div
                id="progress-current"
                class="relative bg-[var(--color-primary)] h-full pl-[3.5vw] rounded-[inherit]"
              >
              </div>
            </div>
            <div id="time-div" class="flex text-[3vw]">
              <span id="time-current" class="mr-auto pl-1.5"></span>
              <span id="time-total" class="pr-1.5"></span>
            </div>
          </div>
          <div id="lastfm" class="flex flex-row items-center mt-2vw">
            <span
              id="scrobbles-count"
              class="text-[5.5vw] mr-[2vw] bg-[var(--color-primary)] text-[var(--base-color-secondary)] mix-blend-[var(--mix-blend-mode)] px-[2.5vw] rounded-[6vw]"
            ></span>
            <span id="scrobbles-text" class="text-[5vw]">scrobbles</span>
          </div>
        </div>
      </div>
    </div>
    <div
      id="bg-image"
      class="bg-cover bg-center bg-no-repeat bg-[var(--color-secondary)] filter blur-[7vw] brightness-[var(--filter-brightness)] absolute h-screen w-screen top-0 scale-[1.3] -z-10"
    >
      <div
        class="bg-[var(--bg-filter)] w-full h-full absolute filter grayscale-[0.3]"
      >
      </div>
    </div>
  </body>
</html>

<style>
  .light-mode {
    --filter-brightness: 1.5;
    --base-color-primary: #fff;
    --base-color-secondary: #fff;
    --mix-blend-mode: darken;
  }

  .dark-mode {
    --filter-brightness: 0.5;
    --base-color-primary: #fff;
    --base-color-secondary: #000;
    --mix-blend-mode: lighten;
  }

  :root {
    --color-primary: var(--color-primary);
    --color-secondary: var(--color-secondary);
    --color-progress: var(--color-progress);
  }
</style>
